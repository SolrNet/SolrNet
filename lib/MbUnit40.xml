<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MbUnit40</name>
    </assembly>
    <members>
        <member name="T:MbUnit.Framework.TabularDataFileType">
            <summary>
            Specifies the type of File user by TabularDataAttribute
            </summary>
        </member>
        <member name="F:MbUnit.Framework.TabularDataFileType.CsvFile">
            <summary>
            CSV File
            </summary>
        </member>
        <member name="F:MbUnit.Framework.TabularDataFileType.TabFile">
            <summary>
            Tab-delimited File
            </summary>
        </member>
        <member name="T:MbUnit.Framework.FlatFileDataObjectAttribute">
            <summary>
            Parses CSV and tab-delimited files into DynamicObject's for data-driven tests. Column 
            headers in the first row are used to name the properties in the DynamicObject.
            This attribute can be added multiple times to the same test method.
            WARNING: column headings must contain valid C# variable names to enable proper usage
            </summary>
            <remarks>
            <para>
            Here's how to apply this attribute to a Gallio/MbUnit test:
            
            [FlatFileDataObject("./TestData/XLS/TestFileWithQuotes.csv", FileType.CsvFile)]
            public void TestMethod2(dynamic RowOfTestData)
            {
                TestLog.WriteLine(RowOfTestData.ToStringWithNewLines());
                TestLog.WriteLine("UserName through the DLR ==> " + RowOfTestData.UserName);
                TestLog.WriteLine("Password through the DLR ==> " + RowOfTestData.Password);
            }
            
            [FlatFileDataObject("./TestData/XLS/CaliforniaExcel.txt", FileType.TabFile)]
            public void TestMethod2(dynamic RowOfTestData)
            {
                TestLog.WriteLine(RowOfTestData.ToStringWithNewLines());
                TestLog.WriteLine("Password through the DLR ==> " + RowOfTestData.TestURL);
            }
            </para>
            </remarks>
        </member>
        <member name="T:MbUnit.Framework.TabularDataAttributeBase">
            <summary>
            Abstract base class to be used by implementations which use the TabularDataObjectFactory.
            Eliminates repetition of the filtering arrays and much of the Factory-property plumbing.
            </summary>
        </member>
        <member name="F:MbUnit.Framework.TabularDataAttributeBase.factoryType">
            <summary>
            Factory Type used by the FixtureMemberInvoker
            </summary>
        </member>
        <member name="F:MbUnit.Framework.TabularDataAttributeBase.factoryMethodName">
            <summary>
            Factory Method Name used by the FixtureMemberInvoker
            </summary>
        </member>
        <member name="M:MbUnit.Framework.TabularDataAttributeBase.BuildDataTable">
            <summary>
            Subclasses are obliged to create an implementation which generates a DataTable. This is a cliche
            usage of the Template Method pattern.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.TabularDataAttributeBase.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
            <inheritdoc />
        </member>
        <member name="P:MbUnit.Framework.TabularDataAttributeBase.RowIndexIncludeFilterArray">
            <summary>
            Indices of Rows from the file to include.  If this Array is kept as null, all Rows are included 
            by default.
            </summary>
        </member>
        <member name="P:MbUnit.Framework.TabularDataAttributeBase.RowIndexExcludeFilterArray">
            <summary>
            Indices of Rows from the file to exclude.  Exclusion takes precidence over inclusion.
            </summary>
        </member>
        <member name="P:MbUnit.Framework.TabularDataAttributeBase.CellValueIncludeFilterArray">
            <summary>
            Cell Values belonging to Rows which should be included.  If this Array is kept as null, all Rows 
            are included by default.
            </summary>
        </member>
        <member name="P:MbUnit.Framework.TabularDataAttributeBase.CellValueExcludeFilterArray">
            <summary>
            Cell Values belonging to Rows which should be excluded.  Exclusion takes precidence over inclusion.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.FlatFileDataObjectAttribute.#ctor(System.String,MbUnit.Framework.TabularDataFileType)">
            <summary>
            Specify the file path and the type of file to use as a data source
            </summary>
        </member>
        <member name="M:MbUnit.Framework.FlatFileDataObjectAttribute.BuildDataTable">
            <summary>
            Implementation of the BuildDataTable method for this class alone.  Will be invoked by base class
            PopulateDataSource method.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.XmlDataObjectAttribute">
            <summary>
            Parses Xml files into the dynamic XmlDataObjects for data-driven tests.
            </summary>
            <remarks>
            <para>
            TODO: add more thorough explanation of usage here.  For now, refer to the Unit Tests.
            TODO: make the GetElementList method return IEnumerable&lt;XmlDataObject&gt;
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectAttribute.#ctor(System.String)">
            <summary>
            Specifies the declaring type and name of a static method, property or field
            that will provide values for a data-driven test.
            </summary>
            <param name="xPath"></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="xPath"/> is null.</exception>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
            <inheritdoc />
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectAttribute.OpenXDocument(Gallio.Common.Reflection.ICodeElementInfo)">
            <summary>
            Uses the existing Gallio plumbing to locate files
            </summary>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectAttribute.GetElementList(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Returns one-to-many elements located within xdocument by the XPath.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.XmlDataObjectCartesianAttribute">
            <summary>
            Parses one-to-many Xml files into dynamic XmlDataObjects for data-driven tests.
            Returns the Cartesian Product of all of sets (lists) of Elements specified by the XPaths.
            </summary>
            <remarks>
            <para>
            
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectCartesianAttribute.#ctor(System.Object[])">
            <summary>
            Specifies the declaring type and name of a static method, property or field
            that will provide values for a data-driven test.
            </summary>
            <param name="FileAndXPathCouplets">Array contain pairs of Xml File Paths and XPaths</param>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectCartesianAttribute.#ctor(System.String,System.String)">
            <summary>
            CLS-compliant constructor for single file
            </summary>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectCartesianAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            CLS-compliant constructor for two-file combination
            </summary>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectCartesianAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            CLS-compliant constructor for three-file combination
            </summary>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectCartesianAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            CLS-compliant constructor for four-file combination
            </summary>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectCartesianAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            CLS-compliant constructor for four-file combination
            </summary>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectCartesianAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
            <inheritdoc />
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectCartesianAttribute.OpenXDocument(System.String,Gallio.Common.Reflection.ICodeElementInfo)">
            <summary>
            Use the Gallio's plumbing to locate Files
            </summary>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectCartesianAttribute.BuildListOfNodeLists(Gallio.Common.Reflection.ICodeElementInfo)">
            <param name="codeElement">Gallio parameter passed by PopulateDataSource for identifying assembly manifest</param>
            <summary>List of XElements in the path</summary>
        </member>
        <member name="M:MbUnit.Framework.XmlDataObjectCartesianAttribute.LoadXPathNodeList(Gallio.Common.Reflection.ICodeElementInfo,System.String,System.String)">
            <param name="codeElement">Gallio Code Element for identifying assembly manifest</param>
            <param name="FilePath"></param>
            <param name="XPath">XPath of the one-to-many nodes</param>
            <returns>List of XElements in the path</returns>
        </member>
    </members>
</doc>
